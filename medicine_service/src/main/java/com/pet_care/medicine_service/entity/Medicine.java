package com.pet_care.medicine_service.entity;

// Import necessary libraries
import com.fasterxml.jackson.annotation.JsonProperty;
import com.pet_care.medicine_service.enums.MedicineStatus;
import com.pet_care.medicine_service.enums.MedicineTypes;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.FieldDefaults;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.util.Date;
import java.util.Set;

/**
 * The Medicine entity represents a medicine in the system, with attributes such as name, quantity, price,
 * manufacture date, expiry date, and associated data like manufacturer, locations, and calculation units.
 * This entity is mapped to the "medicines" table in the database.
 */
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity(name = "medicines")  // Specifies the name of the table in the database
@FieldDefaults(level = AccessLevel.PRIVATE)  // Ensures all fields are private by default
public class Medicine {

    /**
     * Unique identifier for the Medicine entity.
     * The ID is automatically generated using an auto-increment strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // The ID is auto-generated by the database
            Long id;

    /**
     * The name of the medicine.
     */
    String name;

    /**
     * The manufacturing date of the medicine.
     */
    @JsonProperty("manufacturing_date")  // Customizes the JSON key to "manufacturing_date"
            Date manufacturingDate;

    /**
     * The expiry date of the medicine.
     */
    @JsonProperty("expiry_date")  // Customizes the JSON key to "expiry_date"
            Date expiryDate;

    /**
     * The import date of the medicine.
     */
    @JsonProperty("date_import")  // Customizes the JSON key to "date_import"
            Date dateImport;

    /**
     * The URL of the medicine's image.
     */
    @JsonProperty("image_url")  // Customizes the JSON key to "image_url"
            String imageUrl;

    /**
     * The quantity of the medicine available in stock.
     */
    Integer quantity;

    /**
     * The price of the medicine.
     */
    Double price;

    /**
     * A many-to-many relationship between Medicine and CalculationUnit.
     * A medicine can have multiple calculation units, and a calculation unit can apply to multiple medicines.
     */
    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.PERSIST})  // Cascades persist operations
            Set<CalculationUnit> calculationUnits;

    /**
     * A many-to-one relationship between Medicine and Manufacture.
     * Each medicine has one manufacturer (manufacture), and the manufacturer can produce multiple medicines.
     */
    @ManyToOne()  // Specifies a many-to-one relationship
    @JoinColumn(name = "manufacture_id")  // Foreign key for the relationship
            Manufacture manufacture;

    /**
     * A many-to-many relationship between Medicine and Location.
     * A medicine can be stored in multiple locations, and a location can store multiple medicines.
     */
    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.PERSIST})  // Cascades persist operations
            Set<Location> locations;

    /**
     * A note or additional information about the medicine.
     */
    String note;

    /**
     * The status of the medicine, defaulting to ACTIVE.
     * This indicates whether the medicine is currently active or inactive.
     */
    @Builder.Default
    MedicineStatus status = MedicineStatus.ACTIVE;  // Default status is ACTIVE

    /**
     * The type of the medicine, e.g., Medicine, Surgical Instruments, Consumables, or Treatment Tools.
     */
    @Enumerated(EnumType.STRING)  // Maps the enum to its string representation in the database
            MedicineTypes types;

    /**
     * The timestamp when the medicine was created.
     * This is auto-generated when the record is first created in the database.
     */
    @Temporal(TemporalType.TIMESTAMP)  // Specifies that this is a timestamp field
    @CreationTimestamp  // Automatically sets the creation timestamp when the entity is persisted
            Date createdAt;

    /**
     * The timestamp when the medicine record was last updated.
     * This is auto-generated whenever the record is updated in the database.
     */
    @Temporal(TemporalType.TIMESTAMP)  // Specifies that this is a timestamp field
    @UpdateTimestamp  // Automatically sets the update timestamp when the entity is updated
            Date updatedAt;
}
